{"version":3,"sources":["Components/User.js","Components/Testimonial.js","App.js","reportWebVitals.js","index.js"],"names":["User","item","className","alt","name","src","avatar","lorem","message","designation","location","rating","Testimonial","items","isLoading","itemCount","App","useState","setitems","setIsLoading","setItemCount","useEffect","a","axios","result","data","fetchItems","id","ArrowBackIos","color","onClick","style","fontSize","marginTop","ArrowForwardIos","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAmBeA,EAhBF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACb,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,MAAMC,IAAKF,EAAKG,KAAMC,IAAKJ,EAAKK,SAC/C,sBAAKJ,UAAU,cAAf,UACE,4BAAID,EAAKM,QACT,4BAAIN,EAAKO,aAEX,oBAAIN,UAAU,OAAd,SAAsBD,EAAKG,OAC3B,6BAAKH,EAAKQ,cACV,6BAAKR,EAAKS,WACV,2CAAcT,EAAKU,OAAnB,YCESC,EAZK,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,UACtBb,EAAOY,EAD0C,EAAhBE,WAEvC,OAAOD,EACL,4CAEA,8BAEG,cAAC,EAAD,CAAMb,KAAMA,O,uCCkCJe,MAvCf,WACE,MAA4BC,mBAAS,IAArC,mBAAQJ,EAAR,KAAeK,EAAf,KACA,EAAoCD,oBAAS,GAA7C,mBAAQH,EAAR,KAAmBK,EAAnB,KACA,EAAoCF,mBAAS,GAA7C,mBAAQF,EAAR,KAAmBK,EAAnB,KAwBA,OArBAC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACIC,IAAM,6CADV,OACXC,EADW,OAGjBN,EAASM,EAAOC,MAChBN,GAAa,GAJI,2CAAH,qDAOhBO,KACA,IAaA,qCACA,oBAAIC,GAAG,OAAP,0BACA,sBAAKzB,UAAU,MAAf,UACE,cAAC0B,EAAA,EAAD,CAAcC,MAAM,UAAUC,QATlC,WACmB,IAAbf,GACJK,EAAaL,EAAY,IAO2BgB,MAAO,CAACC,SAAS,GAAIC,UAAU,OAClF,cAAC,EAAD,CAAanB,UAAWA,EAAWD,MAAOA,EAAOE,UAAWA,IAC5D,cAACmB,EAAA,EAAD,CAAiBL,MAAM,UAAUC,QAhBpC,WACmB,IAAbf,GACJK,EAAaL,EAAY,IAc6BgB,MAAO,CAACC,SAAS,GAAIC,UAAU,cC3B1EE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3b575f07.chunk.js","sourcesContent":["import React from 'react'\n\n//User component\nconst User = ({item}) => {\n  return (\n    <div className='user'>\n      <img className='img' alt={item.name} src={item.avatar} />\n      <div className='description'>\n        <p>{item.lorem}</p>\n        <p>{item.message}</p>\n      </div>\n      <h3 className=\"name\">{item.name}</h3>\n      <h5>{item.designation}</h5>\n      <h5>{item.location}</h5>\n      <h5>Rating:: {item.rating}/5</h5>\n    </div>\n  )\n}\n\nexport default User\n","import React from 'react'\nimport User from './User'\n\n// component for checking the fetching status and then returning the output.\nconst Testimonial = ({ items, isLoading, itemCount }) => {\n  const item = items[itemCount];\n  return isLoading ? (\n    <h1>Loading...</h1>\n  ) : (\n    <div>\n      {\n       <User item={item} />}\n    </div>\n  )\n}\n\nexport default Testimonial","import React, { useState, useEffect } from 'react';\nimport Testimonial from './Components/Testimonial';\nimport axios from 'axios';\nimport { ArrowForwardIos, ArrowBackIos } from '@material-ui/icons';\nimport './App.css';\n\nfunction App() {\n  const [ items, setitems ] = useState([]);\n  const [ isLoading, setIsLoading ] = useState(true);\n  const [ itemCount, setItemCount ] = useState(0);\n\n// fetching of API\n  useEffect(() => {\n    const fetchItems = async () => {\n      const result = await axios(`https://testimonialapi.toolcarton.com/api`)\n      // console.log(result.data)\n      setitems(result.data)\n      setIsLoading(false)\n    }\n\n    fetchItems()\n  },[])\n//  function to increment the itemCount state.\n  function increment() {\n    if (itemCount !==9)\n    setItemCount(itemCount + 1)\n  }\n  //  function to decrement the itemCount state.\n  function decrement() {\n    if (itemCount !==0)\n    setItemCount(itemCount - 1)\n  }\n\n  return (\n    <>\n    <h1 id=\"head\">Testimonials</h1>\n    <div className=\"App\">\n      <ArrowBackIos color=\"primary\" onClick={decrement} style={{fontSize:60, marginTop:250}} />\n     <Testimonial isLoading={isLoading} items={items} itemCount={itemCount} />\n     <ArrowForwardIos color=\"primary\" onClick={increment} style={{fontSize:60, marginTop:250}} />\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}